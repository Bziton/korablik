import sys
import tkinter as tk
from tkinter import messagebox, ttk
import random

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó Python
if sys.version_info < (3, 6):
    print("–¶—è –ø—Ä–æ–≥—Ä–∞–º–∞ –ø–æ—Ç—Ä–µ–±—É—î Python 3.6 –∞–±–æ –Ω–æ–≤—ñ—à–æ—ó –≤–µ—Ä—Å—ñ—ó")
    sys.exit(1)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Tkinter
try:
    import tkinter as tk
    from tkinter import messagebox
except ImportError:
    print("–ü–æ–º–∏–ª–∫–∞: Tkinter –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –π–æ–≥–æ –¥–ª—è –≤–∞—à–æ—ó –≤–µ—Ä—Å—ñ—ó Python.")
    sys.exit(1)

BOARD_SIZE = 10
SHIP_SIZES = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1]

MISS_SCORE = 1
HIT_SCORE = 2 
KILL_SCORE = 3

class BattleshipGame:
    def __init__(self, root):
        self.root = root
        self.root.title("–ú–æ—Ä—Å—å–∫–∏–π –ë—ñ–π")
        self.root.state('zoomed')  # –Ω–∞ –≤–µ—Å—å –µ–∫—Ä–∞–Ω (Windows)

        # –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        self.show_welcome_screen()

        self.player_board = [[' ']*BOARD_SIZE for _ in range(BOARD_SIZE)]
        self.ai_board = [[' ']*BOARD_SIZE for _ in range(BOARD_SIZE)]
        self.ai_ships = []
        self.player_ships = []

        self.player_score = 1000  # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ 1000 –±–∞–ª—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        self.player_turn = True
        self.ship_index = 0  # –Ü–Ω–¥–µ–∫—Å –∫–æ—Ä–∞–±–ª—è, —è–∫–∏–π —Ä–æ–∑—Å—Ç–∞–≤–ª—è—î–º–æ
        self.placing_horizontal = True
        self.current_board_size = BOARD_SIZE  # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
        self.selected_ship = None  # –í–∏–±—Ä–∞–Ω–∏–π –∫–æ—Ä–∞–±–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
        self.moving_ship = False   # –†–µ–∂–∏–º –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è
        
        # –†–æ–∑—à–∏—Ä–µ–Ω—ñ –±–æ–Ω—É—Å–∏
        self.bonuses = {
            "extra_point": 0,  # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –±–∞–ª–∏ –∑–∞ –≤–ª—É—á–∞–Ω–Ω—è
            "double_shot": 0,  # –ü–æ–¥–≤—ñ–π–Ω–∏–π –ø–æ—Å—Ç—Ä—ñ–ª
            "shield": 0,       # –©–∏—Ç –≤—ñ–¥ –ø–æ—Å—Ç—Ä—ñ–ª—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            "radar": 0,        # –ü–æ–∫–∞–∑—É—î 1 –∫–æ—Ä–∞–±–µ–ª—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            "expand_board": 0, # –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –ø–æ–ª—è –Ω–∞ 5—Ö5
            "bomb": 0,        # –ë–æ–º–±–∞, —â–æ –∑–Ω–∏—â—É—î –æ–±–ª–∞—Å—Ç—å 3—Ö3
            "move_ship": 0    # –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è
        }
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –±–æ–Ω—É—Å—ñ–≤
        self.double_shot_active = False
        self.shield_active = False
        self.revealed_ships = []
        self.radar_active = False
        self.radar_animation_cells = []
        self.radar_animation_step = 0
        self.bomb_active = False
        self.bomb_animation_step = 0
        self.protected_cells = set()
        self.move_ship_active = False
        self.ship_to_move = None
        self.moving_horizontal = True
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.setup_interface()
        self.ai_place_ships()
        self.update_status(f"–†–æ–∑—Å—Ç–∞–≤—Ç–µ –∫–æ—Ä–∞–±–ª—ñ. –†–æ–∑–º—ñ—Ä: {SHIP_SIZES[self.ship_index]}")
        
    def show_welcome_screen(self):
        welcome = tk.Toplevel(self.root)
        welcome.title("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!")
        welcome.geometry("400x300")
        welcome.transient(self.root)  # –†–æ–±–∏–º–æ –≤—ñ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω–∏–º
        welcome.grab_set()
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
        welcome.geometry("+%d+%d" % (
            self.root.winfo_screenwidth()/2 - 200,
            self.root.winfo_screenheight()/2 - 150))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Canvas –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ–ª—å–æ—Ä—ñ–≤ —Ç–µ–∫—Å—Ç—É
        canvas = tk.Canvas(welcome, width=380, height=280, bg='white')
        canvas.pack(padx=10, pady=10)
        
        # –î–æ–¥–∞—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –ø—Ä–∞–ø–æ—Ä —è–∫ —Ñ–æ–Ω
        canvas.create_rectangle(0, 0, 380, 140, fill='#005BBB', outline='')  # –°–∏–Ω—ñ–π
        canvas.create_rectangle(0, 140, 380, 280, fill='#FFD500', outline='')  # –ñ–æ–≤—Ç–∏–π
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç
        canvas.create_text(190, 70, text="Made in Ukraine", 
                         font=('Arial', 24, 'bold'), fill='white')
        
        canvas.create_text(190, 120, text="by", 
                         font=('Arial', 18), fill='white')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞–¥—ñ—î–Ω—Ç –¥–ª—è "Gionix"
        colors = ['#FF0000', '#FF7F00', '#FFFF00', '#00FF00', '#0000FF', '#4B0082']
        text = "Gionix"
        x = 190
        y = 170
        for i, char in enumerate(text):
            color = colors[i % len(colors)]
            canvas.create_text(x + (i - len(text)/2) * 20, y, 
                             text=char, font=('Arial', 28, 'bold'), 
                             fill=color)
        
        # –î–æ–¥–∞—î–º–æ Discord
        canvas.create_text(190, 220, text="Discord:", 
                         font=('Arial', 16), fill='#7289DA')  # Discord –∫–æ–ª—ñ—Ä
        canvas.create_text(190, 250, text="gionix", 
                         font=('Arial', 16, 'bold'), fill='#7289DA')
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
        def close_welcome():
            welcome.destroy()
            
        close_btn = tk.Button(welcome, text="–ü–æ—á–∞—Ç–∏ –≥—Ä—É!", 
                            command=close_welcome, 
                            font=('Arial', 12, 'bold'))
        close_btn.pack(pady=10)
        
        # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –≤—ñ–∫–Ω–æ –∑–∞–∫—Ä–∏—î—Ç—å—Å—è
        self.root.wait_window(welcome)

    def setup_interface(self):
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = tk.Frame(self.root)
        self.main_frame.pack(expand=True)
        
        # –°—Ç–∞—Ç—É—Å —Ç–∞ –±–∞–ª–∏ –∑–≤–µ—Ä—Ö—É
        self.status_frame = tk.Frame(self.main_frame)
        self.status_frame.pack(fill=tk.X, pady=10)
        
        self.status_label = tk.Label(self.status_frame, text="", wraplength=400, font=("Arial", 12))
        self.status_label.pack(pady=5)
        
        self.score_label = tk.Label(self.status_frame, text=f"üí∞ –ë–∞–ª–∏: {self.player_score}", font=("Arial", 12, "bold"))
        self.score_label.pack(pady=5)
        
        # –§—Ä–µ–π–º–∏ –¥–ª—è –¥–æ—à–æ–∫
        self.boards_frame = tk.Frame(self.main_frame)
        self.boards_frame.pack(fill=tk.X)
        
        self.player_frame = tk.Frame(self.boards_frame)
        self.player_frame.pack(side=tk.LEFT, padx=20)
        
        self.ai_frame = tk.Frame(self.boards_frame)
        self.ai_frame.pack(side=tk.LEFT, padx=20)
        
        # –ú—ñ—Ç–∫–∏ –¥–ª—è –¥–æ—à–æ–∫
        tk.Label(self.player_frame, text="–í–∞—à–∞ –¥–æ—à–∫–∞").pack()
        tk.Label(self.ai_frame, text="–î–æ—à–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞").pack()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ—à–æ–∫
        self.player_buttons = []
        self.ai_buttons = []
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—Ä–µ–π–º–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        player_board = tk.Frame(self.player_frame)
        player_board.pack()
        
        ai_board = tk.Frame(self.ai_frame)
        ai_board.pack()
        
        for i in range(BOARD_SIZE):
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–∫–∏
            player_row = tk.Frame(player_board)
            player_row.pack()
            
            ai_row = tk.Frame(ai_board)
            ai_row.pack()
            
            row_p = []
            row_ai = []
            
            for j in range(BOARD_SIZE):
                # –ö–Ω–æ–ø–∫–∏ –≥—Ä–∞–≤—Ü—è
                btn_p = tk.Button(player_row, width=2, height=1,
                                command=lambda x=j, y=i: self.place_ship(x, y))
                btn_p.pack(side=tk.LEFT)
                # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
                btn_p.bind('<B1-Motion>', lambda e, x=j, y=i: self.on_drag(e, x, y))
                btn_p.bind('<ButtonRelease-1>', lambda e, x=j, y=i: self.on_drop(e, x, y))
                row_p.append(btn_p)
                
                # –ö–Ω–æ–ø–∫–∏ AI
                btn_ai = tk.Button(ai_row, width=2, height=1,
                                 command=lambda x=j, y=i: self.player_fire(x, y))
                btn_ai.pack(side=tk.LEFT)
                row_ai.append(btn_ai)
                
            self.player_buttons.append(row_p)
            self.ai_buttons.append(row_ai)
            
        # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞ –ø–∞–Ω–µ–ª—å
        self.control_frame = tk.Frame(self.main_frame)
        self.control_frame.pack(side=tk.LEFT, padx=20)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        self.rotate_btn = tk.Button(self.control_frame, text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å",
                                  command=self.toggle_orientation)
        self.rotate_btn.pack(pady=5)
        
        self.shop_btn = tk.Button(self.control_frame, text="–ú–∞–≥–∞–∑–∏–Ω",
                                 command=self.open_shop)
        self.shop_btn.pack(pady=5)

    def update_status(self, message):
        """–û–Ω–æ–≤–ª—é—î —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å—É –≥—Ä–∏."""
        self.status_label.config(text=message)
        self.root.update()

    def update_buttons(self):
        for i in range(self.current_board_size):
            for j in range(self.current_board_size):
                if self.player_board[i][j] == 'S':
                    if (j, i) in self.protected_cells:
                        self.player_buttons[i][j].config(bg="gold")
                    else:
                        self.player_buttons[i][j].config(bg="gray")
                elif self.player_board[i][j] == 'X':
                    self.player_buttons[i][j].config(bg="red")
                elif self.player_board[i][j] == 'O':
                    self.player_buttons[i][j].config(bg="blue")
                else:
                    self.player_buttons[i][j].config(bg="SystemButtonFace")
                    
                if self.ai_board[i][j] == 'X':
                    self.ai_buttons[i][j].config(bg="red")
                elif self.ai_board[i][j] == 'O':
                    self.ai_buttons[i][j].config(bg="blue")
                else:
                    self.ai_buttons[i][j].config(bg="SystemButtonFace")

    def toggle_orientation(self):
        self.placing_horizontal = not self.placing_horizontal
        self.update_status(f"–û—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è: {'–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞' if self.placing_horizontal else '–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞'}")
        
    def place_ship(self, x, y):
        # –Ø–∫—â–æ –º–∏ –≤ —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è
        if self.moving_ship and self.selected_ship:
            # –°–ø—Ä–æ–±–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å –Ω–∞ –Ω–æ–≤–æ–º—É –º—ñ—Å—Ü—ñ
            if self.try_move_ship(x, y):
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ö–æ—Ä–∞–±–µ–ª—å –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ!")
                self.moving_ship = False
                self.selected_ship = None
            return

        # –Ø–∫—â–æ –∫–ª—ñ–∫–Ω—É–ª–∏ –ø–æ –∫–æ—Ä–∞–±–ª—é - –≤–∏–±–∏—Ä–∞—î–º–æ –π–æ–≥–æ –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
        if self.player_board[y][x] == 'S' and not self.moving_ship:
            for ship in self.player_ships:
                if (x, y) in ship["coords"]:
                    self.selected_ship = ship
                    self.moving_ship = True
                    # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∞–±–µ–ª—å –∑ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
                    for sx, sy in ship["coords"]:
                        self.player_board[sy][sx] = ' '
                    self.update_buttons()
                    messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–ö–æ—Ä–∞–±–µ–ª—å –≤–∏–¥—ñ–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä –∫–ª–∞—Ü–Ω—ñ—Ç—å, –∫—É–¥–∏ –π–æ–≥–æ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏.")
                    break
            return

        if self.shield_active and self.player_board[y][x] == 'S':
            # –î–æ–¥–∞—î–º–æ –∑–∞—Ö–∏—Å—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É –∫–æ—Ä–∞–±–ª—è
            if (x, y) not in self.protected_cells:
                self.protected_cells.add((x, y))
                self.bonuses["shield"] -= 1
                # –ó–º—ñ–Ω—é—î–º–æ –∫–æ–ª—ñ—Ä –∑–∞—Ö–∏—â–µ–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏
                self.player_buttons[y][x].config(bg="gold")
                self.update_status("–ö–ª—ñ—Ç–∏–Ω–∫—É –∫–æ—Ä–∞–±–ª—è –∑–∞—Ö–∏—â–µ–Ω–æ!")
            else:
                self.update_status("–¶—è –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤–∂–µ –∑–∞—Ö–∏—â–µ–Ω–∞!")
            self.shield_active = False
            return

        if self.ship_index >= len(SHIP_SIZES):
            return
            
        size = SHIP_SIZES[self.ship_index]
        coords = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
        for i in range(size):
            if self.placing_horizontal:
                if x + i >= BOARD_SIZE:
                    self.update_status("–ö–æ—Ä–∞–±–µ–ª—å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ –ø–æ–ª—è!")
                    return
                coords.append((x + i, y))
            else:
                if y + i >= BOARD_SIZE:
                    self.update_status("–ö–æ—Ä–∞–±–µ–ª—å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ –ø–æ–ª—è!")
                    return
                coords.append((x, y + i))
                
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ç–∏–Ω—É –∑ —ñ–Ω—à–∏–º–∏ –∫–æ—Ä–∞–±–ª—è–º–∏
        for coord in coords:
            cx, cy = coord
            if self.player_board[cy][cx] != ' ':
                self.update_status("–¢—É—Ç –≤–∂–µ —î –∫–æ—Ä–∞–±–µ–ª—å!")
                return
                
        # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è
        for coord in coords:
            cx, cy = coord
            self.player_board[cy][cx] = 'S'
            
        self.player_ships.append({"coords": coords, "hits": 0})
        self.ship_index += 1
        self.update_buttons()
        
        if self.ship_index < len(SHIP_SIZES):
            self.update_status(f"–†–æ–∑—Å—Ç–∞–≤—Ç–µ –∫–æ—Ä–∞–±–µ–ª—å —Ä–æ–∑–º—ñ—Ä–æ–º {SHIP_SIZES[self.ship_index]}")
        else:
            self.update_status("–í—Å—ñ –∫–æ—Ä–∞–±–ª—ñ —Ä–æ–∑—Å—Ç–∞–≤–ª–µ–Ω—ñ. –ü–æ—á–∏–Ω–∞–π—Ç–µ –≥—Ä—É!")
            
    def ai_place_ships(self):
        for size in SHIP_SIZES:
            while True:
                horizontal = random.choice([True, False])
                if horizontal:
                    x = random.randint(0, BOARD_SIZE - size)
                    y = random.randint(0, BOARD_SIZE - 1)
                else:
                    x = random.randint(0, BOARD_SIZE - 1)
                    y = random.randint(0, BOARD_SIZE - size)
                    
                coords = []
                valid = True
                
                for i in range(size):
                    if horizontal:
                        coords.append((x + i, y))
                    else:
                        coords.append((x, y + i))
                        
                for coord in coords:
                    cx, cy = coord
                    if self.ai_board[cy][cx] != ' ':
                        valid = False
                        break
                        
                if valid:
                    for coord in coords:
                        cx, cy = coord
                        self.ai_board[cy][cx] = 'S'
                    self.ai_ships.append({"coords": coords, "hits": 0})
                    break
                    
    def mark_hit(self, ships, x, y):
        for ship in ships:
            if (x, y) in ship["coords"]:
                ship["hits"] += 1
                if ship["hits"] == len(ship["coords"]):
                    self.update_status("–ö–æ—Ä–∞–±–µ–ª—å –ø–æ—Ç–æ–ø–ª–µ–Ω–æ!")
                    self.player_score += KILL_SCORE
                break
                
    def check_win(self, ships):
        return all(ship["hits"] == len(ship["coords"]) for ship in ships)
        
    def reset_game(self):
        self.root.destroy()
        root = tk.Tk()
        game = BattleshipGame(root)
        root.mainloop()

    def player_fire(self, x, y):
        if self.ship_index < len(SHIP_SIZES):
            self.update_status("–°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑—Å—Ç–∞–≤—Ç–µ –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ!")
            return
        if not self.player_turn:
            self.update_status("–ß–µ–∫–∞–π—Ç–µ –Ω–∞ —Å–≤—ñ–π —Ö—ñ–¥.")
            return

        if self.radar_active:
            self.animate_radar_scan(x, y)
            return

        if self.bomb_active:
            self.animate_bomb(x, y)
            return

        cell = self.ai_board[y][x]
        if cell in ['X', 'O']:
            self.update_status("–¢—É—Ç –≤–∂–µ —Å—Ç—Ä—ñ–ª—è–ª–∏!")
            return

        if cell == 'S':
            self.ai_board[y][x] = 'X'
            self.mark_hit(self.ai_ships, x, y)
            bonus_points = self.bonuses["extra_point"]
            self.player_score += HIT_SCORE + bonus_points
            
            if self.double_shot_active:
                self.update_status("–í–ª—É—á–∏–ª–∏! –£ –≤–∞—Å —â–µ –æ–¥–∏–Ω –ø–æ—Å—Ç—Ä—ñ–ª (–ø–æ–¥–≤—ñ–π–Ω–∏–π –ø–æ—Å—Ç—Ä—ñ–ª –∞–∫—Ç–∏–≤–Ω–∏–π)")
                self.double_shot_active = False
            else:
                self.update_status("–í–ª—É—á–∏–ª–∏! –í–∞—à —Ö—ñ–¥ —â–µ —Ä–∞–∑.")
            
            self.score_label.config(text=f"üí∞ –ë–∞–ª–∏: {self.player_score}")
        else:
            self.ai_board[y][x] = 'O'
            self.player_score += MISS_SCORE
            
            if self.double_shot_active:
                self.update_status("–ü—Ä–æ–º–∞—Ö! –£ –≤–∞—Å —â–µ –æ–¥–∏–Ω –ø–æ—Å—Ç—Ä—ñ–ª (–ø–æ–¥–≤—ñ–π–Ω–∏–π –ø–æ—Å—Ç—Ä—ñ–ª –∞–∫—Ç–∏–≤–Ω–∏–π)")
                self.double_shot_active = False
            else:
                self.update_status("–ü—Ä–æ–º–∞—Ö. –•—ñ–¥ —Å—É–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.")
                self.player_turn = False
                self.update_buttons()
                self.root.after(1000, self.ai_turn)

        self.update_buttons()
        if self.check_win(self.ai_ships):
            messagebox.showinfo("–í–∏–≥—Ä–∞—à", f"–í–∏ –≤–∏–≥—Ä–∞–ª–∏! –ë–∞–ª–∏: {self.player_score}")
            self.reset_game()

    def ai_turn(self):
        if self.shield_active:
            self.shield_active = False
            self.update_status("–©–∏—Ç –∑–∞—Ö–∏—Å—Ç–∏–≤ –≤–∞—Å –≤—ñ–¥ –ø–æ—Å—Ç—Ä—ñ–ª—É! –í–∞—à —Ö—ñ–¥.")
            self.player_turn = True
            return

        while True:
            x = random.randint(0, self.current_board_size-1)
            y = random.randint(0, self.current_board_size-1)
            cell = self.player_board[y][x]
            if cell not in ['X', 'O']:
                break

        if cell == 'S':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞—Ö–∏—â–µ–Ω–∞
            if (x, y) in self.protected_cells:
                # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—Ö–∏—Å—Ç –∑ –∫–ª—ñ—Ç–∏–Ω–∫–∏
                self.protected_cells.remove((x, y))
                self.update_status("–©–∏—Ç –Ω–∞ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ –∑–Ω–∏—â–µ–Ω–æ!")
                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –∫–æ–ª—ñ—Ä –∫–ª—ñ—Ç–∏–Ω–∫–∏
                self.player_buttons[y][x].config(bg="gray")
                self.player_turn = True
            else:
                # –ó–≤–∏—á–∞–π–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤–ª—É—á–∞–Ω–Ω—è
                self.player_board[y][x] = 'X'
                self.mark_hit(self.player_ships, x, y)
                self.update_status("–°—É–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–ª—É—á–∏–≤! –í—ñ–Ω —Ö–æ–¥–∏—Ç—å —â–µ.")
                self.update_buttons()
                if self.check_win(self.player_ships):
                    messagebox.showinfo("–ü—Ä–æ–≥—Ä–∞—à", "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏!")
                    self.reset_game()
                    return
                self.root.after(1000, self.ai_turn)
        else:
            self.player_board[y][x] = 'O'
            self.update_status("–°—É–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–≤—Å—è. –í–∞—à —Ö—ñ–¥.")
            self.player_turn = True
            self.update_buttons()

    def use_bonus(self, bonus_type):
        if bonus_type == "move_ship" and self.bonuses["move_ship"] > 0:
            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏, —è–∫—â–æ –≤–æ–Ω–∏ —î
            for row in self.player_buttons:
                for button in row:
                    button.unbind('<Button-1>')
                    button.unbind('<Motion>')
                    button.unbind('<MouseWheel>')

            def select_ship(event):
                button = event.widget
                x = y = None
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏
                for i, row in enumerate(self.player_buttons):
                    if button in row:
                        y = i
                        x = row.index(button)
                        break
                
                if x is not None and y is not None:
                    if self.player_board[y][x] == 'S':
                        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∞–±–µ–ª—å –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                        for ship in self.player_ships:
                            if (x, y) in ship["coords"]:
                                self.start_ship_movement(ship)
                                break
                    else:
                        self.update_status("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∞–±–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è!")

            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
            for row in self.player_buttons:
                for button in row:
                    button.bind('<Button-1>', select_ship)

            self.update_status("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∞–±–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è")
            
        elif bonus_type == "shield" and self.bonuses["shield"] > 0:
            self.shield_active = True
            self.update_status("–í–∏–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—Ç–∏–Ω–∫—É –∫–æ—Ä–∞–±–ª—è –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É!")
        elif bonus_type == "double_shot" and self.bonuses["double_shot"] > 0:
            self.bonuses["double_shot"] -= 1
            self.double_shot_active = True
            self.update_status("–ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –ø–æ–¥–≤—ñ–π–Ω–∏–π –ø–æ—Å—Ç—Ä—ñ–ª!")
            
        elif bonus_type == "radar" and self.bonuses["radar"] > 0:
            self.bonuses["radar"] -= 1
            self.radar_active = True
            self.update_status("–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–∞–¥–∞—Ä–æ–º!")
            return

        elif bonus_type == "bomb" and self.bonuses["bomb"] > 0:
            self.bonuses["bomb"] -= 1
            self.bomb_active = True
            self.update_status("–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≤–∏–±—É—Ö—É –±–æ–º–±–∏!")
            return

    def animate_radar_scan(self, center_x, center_y):
        # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –∞–Ω—ñ–º–∞—Ü—ñ—é
        for x, y in self.radar_animation_cells:
            if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE:
                self.ai_buttons[y][x].config(bg="SystemButtonFace")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É –∞–Ω—ñ–º–∞—Ü—ñ—ó
        animation_patterns = [
            [(0,0)],  # –¶–µ–Ω—Ç—Ä
            [(0,-1), (1,0), (0,1), (-1,0)],  # –•—Ä–µ—Å—Ç
            [(-1,-1), (1,-1), (1,1), (-1,1)]  # –î—ñ–∞–≥–æ–Ω–∞–ª—ñ
        ]
        
        if self.radar_animation_step < len(animation_patterns):
            pattern = animation_patterns[self.radar_animation_step]
            self.radar_animation_cells = []
            
            for dx, dy in pattern:
                new_x = center_x + dx
                new_y = center_y + dy
                if 0 <= new_x < BOARD_SIZE and 0 <= new_y < BOARD_SIZE:
                    self.radar_animation_cells.append((new_x, new_y))
                    self.ai_buttons[new_y][new_x].config(bg="cyan")
            
            self.radar_animation_step += 1
            if self.radar_animation_step < len(animation_patterns):
                self.root.after(300, lambda: self.animate_radar_scan(center_x, center_y))
            else:
                self.radar_animation_step = 0
                self.radar_active = False
                # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
                self.show_radar_result(center_x, center_y)
                
    def show_radar_result(self, center_x, center_y):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–ª–∞—Å—Ç—å 3x3 –Ω–∞–≤–∫–æ–ª–æ –≤–∏–±—Ä–∞–Ω–æ—ó —Ç–æ—á–∫–∏
        ships_found = False
        for dy in range(-1, 2):
            for dx in range(-1, 2):
                x = center_x + dx
                y = center_y + dy
                if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE:
                    if self.ai_board[y][x] == 'S':
                        ships_found = True
                        self.ai_buttons[y][x].config(bg="yellow")
        
        # –û—á–∏—â–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
        def clear_radar():
            for x, y in self.radar_animation_cells:
                if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE:
                    if self.ai_board[y][x] not in ['X', 'O']:
                        self.ai_buttons[y][x].config(bg="SystemButtonFace")
        
        self.root.after(2000, clear_radar)
        
        if ships_found:
            self.update_status("–†–∞–¥–∞—Ä –≤–∏—è–≤–∏–≤ –∫–æ—Ä–∞–±–µ–ª—å!")
        else:
            self.update_status("–†–∞–¥–∞—Ä –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏—è–≤–∏–≤ –≤ —Ü—ñ–π –æ–±–ª–∞—Å—Ç—ñ.")

    def expand_player_board(self):
        if self.current_board_size >= 25:  # –û–±–º–µ–∂–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
            messagebox.showinfo("–ü–æ–º–∏–ª–∫–∞", "–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–ª—è!")
            return

        new_size = self.current_board_size + 5
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –ø–æ–ª–µ
        new_board = [[' ']*new_size for _ in range(new_size)]
        
        # –ö–æ–ø—ñ—é—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–ª–µ
        for y in range(self.current_board_size):
            for x in range(self.current_board_size):
                new_board[y][x] = self.player_board[y][x]
                
        self.player_board = new_board
        self.current_board_size = new_size
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        for widget in self.player_frame.winfo_children():
            widget.destroy()
            
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –∫–Ω–æ–ø–∫–∏
        tk.Label(self.player_frame, text="–í–∞—à–∞ –¥–æ—à–∫–∞").pack()
        
        player_board = tk.Frame(self.player_frame)
        player_board.pack()
        
        self.player_buttons = []
        for i in range(new_size):
            row_frame = tk.Frame(player_board)
            row_frame.pack()
            row_p = []
            
            for j in range(new_size):
                btn_p = tk.Button(row_frame, width=2, height=1,
                                command=lambda x=j, y=i: self.place_ship(x, y))
                btn_p.pack(side=tk.LEFT)
                row_p.append(btn_p)
                
                # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª—å–æ—Ä–∏ –∫–Ω–æ–ø–æ–∫
                if self.player_board[i][j] == 'S':
                    btn_p.config(bg="gray")
                elif self.player_board[i][j] == 'X':
                    btn_p.config(bg="red")
                elif self.player_board[i][j] == 'O':
                    btn_p.config(bg="blue")
            
            self.player_buttons.append(row_p)
            
        self.update_status(f"–ü–æ–ª–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ –¥–æ {new_size}x{new_size}!")

    def open_shop(self):
        shop_win = ShopWindow(self)

    def animate_bomb(self, center_x, center_y):
        # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –∞–Ω—ñ–º–∞—Ü—ñ—é
        for x, y in self.radar_animation_cells:
            if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE:
                if self.ai_board[y][x] not in ['X', 'O']:
                    self.ai_buttons[y][x].config(bg="SystemButtonFace")
        
        # –ê–Ω—ñ–º–∞—Ü—ñ—è –≤–∏–±—É—Ö—É
        animation_patterns = [
            [(0,0)],  # –¶–µ–Ω—Ç—Ä
            [(0,-1), (1,0), (0,1), (-1,0)],  # –•—Ä–µ—Å—Ç
            [(-1,-1), (1,-1), (1,1), (-1,1)]  # –î—ñ–∞–≥–æ–Ω–∞–ª—ñ
        ]
        
        if self.bomb_animation_step < len(animation_patterns):
            pattern = animation_patterns[self.bomb_animation_step]
            self.radar_animation_cells = []
            
            for dx, dy in pattern:
                new_x = center_x + dx
                new_y = center_y + dy
                if 0 <= new_x < BOARD_SIZE and 0 <= new_y < BOARD_SIZE:
                    self.radar_animation_cells.append((new_x, new_y))
                    self.ai_buttons[new_y][new_x].config(bg="cyan")
            
            self.bomb_animation_step += 1
            if self.bomb_animation_step < len(animation_patterns):
                self.root.after(200, lambda: self.animate_bomb(center_x, center_y))
            else:
                self.bomb_animation_step = 0
                self.bomb_active = False
                # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏–±—É—Ö
                self.apply_bomb_damage(center_x, center_y)
                
    def apply_bomb_damage(self, center_x, center_y):
        hits = 0
        ships_destroyed = 0
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–ª–∞—Å—Ç—å 3x3 –Ω–∞–≤–∫–æ–ª–æ –≤–∏–±—É—Ö—É
        for dy in range(-1, 2):
            for dx in range(-1, 2):
                x = center_x + dx
                y = center_y + dy
                if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE:
                    if self.ai_board[y][x] == 'S':
                        self.ai_board[y][x] = 'X'
                        hits += 1
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∞–±–µ–ª—å –∑–Ω–∏—â–µ–Ω–æ
                        for ship in self.ai_ships:
                            if (x, y) in ship["coords"]:
                                ship["hits"] += 1
                                if ship["hits"] == len(ship["coords"]):
                                    ships_destroyed += 1
                    elif self.ai_board[y][x] == ' ':
                        self.ai_board[y][x] = 'O'
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –æ—á–∫–∏
        self.player_score += hits * HIT_SCORE + ships_destroyed * KILL_SCORE
        self.score_label.config(text=f"üí∞ –ë–∞–ª–∏: {self.player_score}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—à–∫—É
        self.update_buttons()
        
        # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if hits > 0:
            message = f"–ë–æ–º–±–∞ –≤–ª—É—á–∏–ª–∞ {hits} —Ä–∞–∑"
            if ships_destroyed > 0:
                message += f" —ñ –∑–Ω–∏—â–∏–ª–∞ {ships_destroyed} –∫–æ—Ä–∞–±–ª—ñ–≤"
            self.update_status(message + "!")
        else:
            self.update_status("–ë–æ–º–±–∞ –Ω–µ –≤–ª—É—á–∏–ª–∞ –≤ –∂–æ–¥–µ–Ω –∫–æ—Ä–∞–±–µ–ª—å!")
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä–µ–º–æ–≥—É
        if self.check_win(self.ai_ships):
            messagebox.showinfo("–í–∏–≥—Ä–∞—à", f"–í–∏ –≤–∏–≥—Ä–∞–ª–∏! –ë–∞–ª–∏: {self.player_score}")
            self.reset_game()

    def start_ship_movement(self, ship):
        self.ship_to_move = ship
        self.move_ship_active = True
        self.moving_horizontal = True
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –∫–æ—Ä–∞–±–µ–ª—å
        for x, y in self.ship_to_move["coords"]:
            self.player_board[y][x] = ' '
        self.update_buttons()
        
        def on_mouse_move(event):
            if not self.move_ship_active:
                return
                
            button = event.widget
            x = y = None
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏
            for i, row in enumerate(self.player_buttons):
                if button in row:
                    y = i
                    x = row.index(button)
                    break
            
            if x is not None and y is not None:
                # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∫–æ—Ä–∞–±–ª—è
                self.preview_ship_position(x, y)

        def on_mouse_wheel(event):
            if not self.move_ship_active:
                return
            # –ó–º—ñ–Ω—é—î–º–æ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—é –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ –∫–æ–ª–µ—Å–∞ –º–∏—à—ñ
            self.moving_horizontal = not self.moving_horizontal
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
            button = event.widget
            x = y = None
            for i, row in enumerate(self.player_buttons):
                if button in row:
                    y = i
                    x = row.index(button)
                    break
            if x is not None and y is not None:
                self.preview_ship_position(x, y)

        def on_click(event):
            if not self.move_ship_active:
                return
                
            button = event.widget
            x = y = None
            for i, row in enumerate(self.player_buttons):
                if button in row:
                    y = i
                    x = row.index(button)
                    break
            
            if x is not None and y is not None:
                # –°–ø—Ä–æ–±–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å
                if self.try_move_ship(x, y):
                    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
                    for row in self.player_buttons:
                        for btn in row:
                            btn.unbind('<Button-1>')
                            btn.unbind('<Motion>')
                            btn.unbind('<MouseWheel>')
                    self.move_ship_active = False
                    self.ship_to_move = None
                    self.bonuses["move_ship"] -= 1

        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
        for row in self.player_buttons:
            for button in row:
                button.bind('<Motion>', on_mouse_move)
                button.bind('<Button-1>', on_click)
                button.bind('<MouseWheel>', on_mouse_wheel)

        self.update_status("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–ª–µ—Å–æ –º–∏—à—ñ –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç—É –∫–æ—Ä–∞–±–ª—è")

    def on_drag(self, event, x, y):
        if not self.dragging_ship and self.player_board[y][x] == 'S':
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∞–±–µ–ª—å –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            for ship in self.player_ships:
                if (x, y) in ship["coords"]:
                    self.dragging_ship = ship
                    # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∞–±–µ–ª—å –∑ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
                    for sx, sy in ship["coords"]:
                        self.player_board[sy][sx] = ' '
                    break
        
        if self.dragging_ship:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
            for i, row in enumerate(self.player_buttons):
                for j, button in enumerate(row):
                    if button == event.widget:
                        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
                        self.preview_ship_position(j, i)
                        break

    def on_drop(self, event, x, y):
        if self.dragging_ship:
            # –°–ø—Ä–æ–±–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å
            success = self.try_move_ship(x, y)
            if not success:
                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∞–±–µ–ª—å –Ω–∞ –ø–æ—á–∞—Ç–∫–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
                for cx, cy in self.dragging_ship["coords"]:
                    self.player_board[cy][cx] = 'S'
            self.dragging_ship = None
            self.update_buttons()

    def preview_ship_position(self, x, y):
        if not self.dragging_ship:
            return
            
        # –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
        self.update_buttons()
        
        ship_size = len(self.dragging_ship["coords"])
        preview_coords = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–º—ñ—Å—Ç–∏—Ç—å—Å—è –∫–æ—Ä–∞–±–µ–ª—å
        can_place = True
        for i in range(ship_size):
            new_x = x + i
            new_y = y
            
            if new_x >= self.current_board_size or new_y >= self.current_board_size:
                can_place = False
                break
                
            preview_coords.append((new_x, new_y))
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä–µ—Ç–∏–Ω –∑ —ñ–Ω—à–∏–º–∏ –∫–æ—Ä–∞–±–ª—è–º–∏
            if self.player_board[new_y][new_x] == 'S':
                can_place = False
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
        for cx, cy in preview_coords:
            if 0 <= cx < self.current_board_size and 0 <= cy < self.current_board_size:
                self.player_buttons[cy][cx].config(bg="lightgreen" if can_place else "pink")

    def try_move_ship(self, new_x, new_y):
        if not self.selected_ship:
            return False
            
        ship_size = len(self.selected_ship["coords"])
        new_coords = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–º—ñ—Å—Ç–∏—Ç—å—Å—è –∫–æ—Ä–∞–±–µ–ª—å
        for i in range(ship_size):
            if new_x + i >= self.current_board_size:
                messagebox.showinfo("–ü–æ–º–∏–ª–∫–∞", "–ö–æ—Ä–∞–±–µ–ª—å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ –ø–æ–ª—è!")
                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∞–±–µ–ª—å –Ω–∞ –º—ñ—Å—Ü–µ
                for x, y in self.selected_ship["coords"]:
                    self.player_board[y][x] = 'S'
                self.update_buttons()
                return False
            new_coords.append((new_x + i, new_y))
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä–µ—Ç–∏–Ω –∑ —ñ–Ω—à–∏–º–∏ –∫–æ—Ä–∞–±–ª—è–º–∏
        for coord in new_coords:
            cx, cy = coord
            if self.player_board[cy][cx] == 'S':
                messagebox.showinfo("–ü–æ–º–∏–ª–∫–∞", "–¢—É—Ç –≤–∂–µ —î —ñ–Ω—à–∏–π –∫–æ—Ä–∞–±–µ–ª—å!")
                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∞–±–µ–ª—å –Ω–∞ –º—ñ—Å—Ü–µ
                for x, y in self.selected_ship["coords"]:
                    self.player_board[y][x] = 'S'
                self.update_buttons()
                return False
        
        # –†–æ–∑–º—ñ—â—É—î–º–æ –∫–æ—Ä–∞–±–µ–ª—å –Ω–∞ –Ω–æ–≤–æ–º—É –º—ñ—Å—Ü—ñ
        for x, y in new_coords:
            self.player_board[y][x] = 'S'
            
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∫–æ—Ä–∞–±–ª—è
        self.selected_ship["coords"] = new_coords
        
        self.update_buttons()
        return True

class ShopWindow:
    def __init__(self, game):
        self.game = game
        self.items = [
            {
                "name": "–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –±–∞–ª",
                "description": "+1 –±–∞–ª –∑–∞ –∫–æ–∂–Ω–µ –≤–ª—É—á–∞–Ω–Ω—è",
                "cost": 10,
                "key": "extra_point",
                "max": 5
            },
            {
                "name": "–ü–æ–¥–≤—ñ–π–Ω–∏–π –ø–æ—Å—Ç—Ä—ñ–ª",
                "description": "–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Å—Ç—Ä—ñ–ª—è—Ç–∏ –¥–≤—ñ—á—ñ –∑–∞ —Ö—ñ–¥",
                "cost": 20,
                "key": "double_shot",
                "max": 3
            },
            {
                "name": "–©–∏—Ç",
                "description": "–ó–∞—Ö–∏—â–∞—î –∫–ª—ñ—Ç–∏–Ω–∫—É –∫–æ—Ä–∞–±–ª—è –≤—ñ–¥ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä—ñ–ª—É",
                "cost": 15,
                "key": "shield",
                "max": 3
            },
            {
                "name": "–†–∞–¥–∞—Ä",
                "description": "–ü–æ–∫–∞–∑—É—î —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤ –≤ –æ–±–ª–∞—Å—Ç—ñ 3—Ö3",
                "cost": 25,
                "key": "radar",
                "max": 2
            },
            {
                "name": "–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –ø–æ–ª—è",
                "description": "–ó–±—ñ–ª—å—à—É—î –≤–∞—à–µ –ø–æ–ª–µ –Ω–∞ 5—Ö5 –∫–ª—ñ—Ç–∏–Ω–æ–∫",
                "cost": 100,
                "key": "expand_board",
                "max": 3
            },
            {
                "name": "–ë–æ–º–±–∞",
                "description": "–ó–Ω–∏—â—É—î –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ –≤ –æ–±–ª–∞—Å—Ç—ñ 3—Ö3",
                "cost": 50,
                "key": "bomb",
                "max": 2
            },
            {
                "name": "–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è",
                "description": "–î–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å –≤ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é",
                "cost": 40,
                "key": "move_ship",
                "max": 3
            }
        ]

        self.win = tk.Toplevel(game.root)
        self.win.title("–ú–∞–≥–∞–∑–∏–Ω –±–æ–Ω—É—Å—ñ–≤")
        self.win.geometry("400x600")
        self.win.grab_set()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.win)
        title_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(title_frame, text="–ú–∞–≥–∞–∑–∏–Ω –±–æ–Ω—É—Å—ñ–≤", 
                font=("Arial", 20, "bold")).pack(pady=10)
        
        self.score_label = tk.Label(title_frame, 
                                  text=f"–í–∞—à—ñ –±–∞–ª–∏: {self.game.player_score}", 
                                  font=("Arial", 14))
        self.score_label.pack(pady=5)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        container = tk.Frame(self.win)
        container.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # –ö–∞–Ω–≤–∞—Å —ñ —Å–∫—Ä–æ–ª–±–∞—Ä
        self.canvas = tk.Canvas(container)
        scrollbar = tk.Scrollbar(container, orient="vertical", 
                               command=self.canvas.yview)
        
        # –§—Ä–µ–π–º –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞–≥–∞–∑–∏–Ω—É
        self.scrollable_frame = tk.Frame(self.canvas)
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )

        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–∫–Ω–æ –≤ –∫–∞–Ω–≤–∞—Å—ñ –¥–ª—è —Å–∫—Ä–æ–ª—ñ–Ω–≥—É
        self.canvas.create_window((0, 0), window=self.scrollable_frame, 
                                anchor="nw", width=380)
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        self.canvas.configure(yscrollcommand=scrollbar.set)
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–ª–µ—Å–∞ –º–∏—à—ñ
        self.canvas.bind_all("<MouseWheel>", self._on_mousewheel)
        
        # –ü–∞–∫—É—î–º–æ –∫–∞–Ω–≤–∞—Å —ñ —Å–∫—Ä–æ–ª–±–∞—Ä
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏
        self.create_shop_items()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–∫–Ω–æ –≤ –≥—Ä—ñ –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∑–∞–∫—Ä–∏—Ç—Ç—è
        self.game.shop_window = self
        
        # –û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞
        self.win.protocol("WM_DELETE_WINDOW", self.on_closing)

    def _on_mousewheel(self, event):
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞ Windows (-120 –∞–±–æ 120)
        self.canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

    def create_shop_items(self):
        for item in self.items:
            # –§—Ä–µ–π–º –¥–ª—è —Ç–æ–≤–∞—Ä—É
            item_frame = tk.Frame(self.scrollable_frame, relief="solid", 
                                borderwidth=1)
            item_frame.pack(fill=tk.X, padx=10, pady=5)

            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä
            tk.Label(item_frame, text=item['name'], 
                    font=("Arial", 12, "bold")).pack(pady=5)
            tk.Label(item_frame, text=item['description'], 
                    font=("Arial", 10)).pack()
            tk.Label(item_frame, 
                    text=f"–£ –≤–∞—Å: {self.game.bonuses[item['key']]} / {item['max']}", 
                    font=("Arial", 10)).pack()
            tk.Label(item_frame, text=f"–¶—ñ–Ω–∞: {item['cost']} –±–∞–ª—ñ–≤", 
                    font=("Arial", 10)).pack(pady=5)

            # –ö–Ω–æ–ø–∫–∏
            button_frame = tk.Frame(item_frame)
            button_frame.pack(pady=5)

            buy_btn = tk.Button(button_frame, text="–ö—É–ø–∏—Ç–∏", 
                              command=lambda i=item: self.buy_item(i))
            buy_btn.pack(side=tk.LEFT, padx=5)
            
            if self.game.bonuses[item['key']] >= item['max']:
                buy_btn.configure(state="disabled")

            if item['key'] in ['double_shot', 'shield', 'radar', 'bomb']:
                use_btn = tk.Button(button_frame, text="–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏",
                    command=lambda k=item['key']: self.use_bonus(k))
                use_btn.pack(side=tk.LEFT, padx=5)
                
                if self.game.bonuses[item['key']] <= 0:
                    use_btn.configure(state="disabled")

    def on_closing(self):
        self.game.shop_window = None
        self.win.destroy()

    def buy_item(self, item):
        if self.game.player_score >= item["cost"]:
            if self.game.bonuses[item["key"]] >= item["max"]:
                messagebox.showinfo("–ü–æ–º–∏–ª–∫–∞", 
                                  "–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü—å–æ–≥–æ –±–æ–Ω—É—Å—É!")
                return
                
            self.game.player_score -= item["cost"]
            self.game.bonuses[item["key"]] += 1
            
            if item["key"] == "expand_board":
                self.game.expand_player_board()
                
            self.game.score_label.config(text=f"–ë–∞–ª–∏: {self.game.player_score}")
            self.score_label.config(text=f"–í–∞—à—ñ –±–∞–ª–∏: {self.game.player_score}")
            
            messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–í–∏ –∫—É–ø–∏–ª–∏ {item['name']}!")
            self.win.destroy()
            self.game.open_shop()
        else:
            messagebox.showinfo("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")

    def use_bonus(self, bonus_type):
        self.game.use_bonus(bonus_type)
        self.win.destroy()
        self.game.open_shop()

if __name__ == "__main__":
    try:
        root = tk.Tk()
        game = BattleshipGame(root)
        root.mainloop()
    except Exception as e:
        messagebox.showerror("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞", f"–ü—Ä–æ–≥—Ä–∞–º–∞ –Ω–µ –º–æ–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è: {str(e)}")
        sys.exit(1)
